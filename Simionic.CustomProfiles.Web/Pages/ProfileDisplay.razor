@page "/profile/{Id}"
@inject HttpClient Http
@inject NavigationManager Navigation

<section class="pt-5">
    <div class="text-center mb-4"><h2 class="fw-bolder">@(ProfileData?.Name ?? "Loading...")</h2></div>
    @if (ProfileData is not null)
    {
        <div class="container px-5 py-3 mb-5 w-75 bg-dark bg-opacity-25 rounded-3">
            <div class="row justify-content-center">
                <div class="col">
                    <div class="form-group">
                        <label class="form-label text-black font-weight-bold mr-2">Type</label>
                        <div class="btn-group">
                        @foreach(AircraftType type in Enum.GetValues<AircraftType>())
                        {
                            <button class="btn btn-large @IsSelectedButton(type == ProfileData.AircraftType) mt-1 shadow-none" @onclick="Edit(() => ProfileData.AircraftType = type)">@type</button>
                        }
                        </div>
                        <div class="btn-group ml-5">
                            <button class="btn btn-large @IsSelectedButton(!ProfileData.IsTwinEngine) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.IsTwinEngine = false)">Single</button>
                            <button class="btn btn-large @IsSelectedButton(ProfileData.IsTwinEngine) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.IsTwinEngine = true)">Twin</button>
                        </div>
                    </div>
                </div>
            </div>
            @if (ProfileData.AircraftType == AircraftType.Piston)
            {
                <div class="row justify-content-center">
                    <div class="col-md-auto">
                        <div class="form-group">
                            <label class="form-label text-black font-weight-bold mr-2">Cylinders</label>
                            <div class="btn-group">
                                <button class="btn btn-large @IsSelectedButton(ProfileData.Cylinders == 4) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.Cylinders = 4)">4</button>
                                <button class="btn btn-large @IsSelectedButton(ProfileData.Cylinders == 6) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.Cylinders = 6)">6</button>
                            </div>
                        </div>
                    </div>
                    <div class="col">
                        <div class="form-check form-switch pt-2 pl-0">
                            <label class="form-label text-black font-weight-bold">FADEC (single-lever power control)
                                <input class="form-check-input custom-profile-switch shadow-none" type="checkbox" role="switch" disabled="@(!Editing)" @bind="ProfileData.FADEC"/>
                            </label>
                        </div>
                    </div>
                </div>
                <div class="row justify-content-center">
                    <div class="col-md-auto pr-5">
                    <div class="form-check form-switch pt-2 pl-0 pr-5">
                        <label class="form-label text-black font-weight-bold">Turbocharged 
                            <input class="form-check-input custom-profile-switch shadow-none" type="checkbox" role="switch" disabled="@(!Editing)" @bind="ProfileData.Turbocharged" />
                        </label>
                    </div>            
                </div>
                <div class="col">
                    <div class="form-check form-switch pt-2 pl-0">
                        <label class="form-label text-black font-weight-bold">Constant-speed 
                            <input class="form-check-input custom-profile-switch shadow-none" type="checkbox" role="switch" disabled="@(!Editing)" @bind="ProfileData.ConstantSpeed" />
                        </label>
                    </div>
                </div>
            </div>
            }
            <div class="row justify-content-center">
                <div class="col pt-2">
                    <div class="form-group">
                        <label class="form-label text-black font-weight-bold mr-2">Temperature</label>
                        <div class="btn-group">
                            <button class="btn btn-large @IsSelectedButton(ProfileData.TemperaturesInFarenheit) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.TemperaturesInFarenheit = true)">&deg;F</button>
                            <button class="btn btn-large @IsSelectedButton(!ProfileData.TemperaturesInFarenheit) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.TemperaturesInFarenheit = false)">&deg;C</button>
                        </div>
                    </div>
                </div>
            </div>
            <!-- RANGED GAUGES -->
            @if (ProfileData.AircraftType != AircraftType.Piston)
            {
                <!-- Interior turbine temperature -->
                <GaugeDisplay @bind-ProfileGauge="@ProfileData.ITT" />
            }
            @if (ProfileData.AircraftType == AircraftType.TurboProp)
            {
                <!-- Torque in ft-lbs -->
                <GaugeDisplay @bind-ProfileGauge="@ProfileData.Torque" IsTorqueGauge="true" />
            }
            @if (ProfileData.AircraftType != AircraftType.Jet)
            {
                <!-- RPM -->           
                <GaugeDisplay @bind-ProfileGauge="@ProfileData.RPM" />
            }
            @if (ProfileData.AircraftType == AircraftType.TurboProp)
            {
                <!-- Gas generator speed -->            
                <GaugeDisplay @bind-ProfileGauge="@ProfileData.NG" />
            }
            <!-- Fuel capacity -->           
            <GaugeDisplay @bind-ProfileGauge="@ProfileData.Fuel" IsFuelGauge="true" />
            <!-- Fuel flow (gallons per hour) -->           
            <GaugeDisplay @bind-ProfileGauge="@ProfileData.FuelFlow" />
            <!-- Oil pressure -->            
            <GaugeDisplay @bind-ProfileGauge="@ProfileData.OilPressure" />
            <!-- Oil temperature -->            
            <GaugeDisplay @bind-ProfileGauge="@ProfileData.OilTemperature" />
            @if (ProfileData.AircraftType == AircraftType.Piston)
            {
                <!-- Cylinder head temperature -->           
                <GaugeDisplay @bind-ProfileGauge="@ProfileData.CHT" />
                <!--  Exhaust gas temperature -->            
                <GaugeDisplay @bind-ProfileGauge="@ProfileData.EGT" />
            }
            <div class="row mb-3">
                <div class="col-md-auto mr-5">
                    <div class="form-check form-switch pt-2 pl-0">
                        <label class="form-label text-black font-weight-bold">Elevator Trim&nbsp;&nbsp;&nbsp;
                            <input class="form-check-input custom-profile-switch shadow-none" type="checkbox" role="switch" disabled="@(!Editing)" @bind="ProfileData.DisplayElevatorTrim"/>
                        </label>
                    </div>
                </div>
                <div class="col-md-auto pt-1 ml-5">
                @if (ProfileData.DisplayElevatorTrim)
                {
                    <div class="form-group mb-0">
                        <label class="form-label text-black font-weight-bold">T/O Range (0-100)
                            <input type="text" class="input-text ml-2 custom-profile-textbox" value="@(ProfileData.ElevatorTrimTakeOffRange?.Min ?? 0)" />
                            ~<input type="text" class="input-text ml-2 custom-profile-textbox" value="@(ProfileData.ElevatorTrimTakeOffRange?.Max ?? 0)" />
                        </label>
                    </div>
                }
                </div>
            </div>
            <div class="row mb-3">
                <div class="col-md-auto mr-5">
                    <div class="form-check form-switch pt-2 pl-0">
                        <label class="form-label text-black font-weight-bold">Rudder Trim&nbsp;&nbsp;&nbsp;&nbsp;
                            <input class="form-check-input custom-profile-switch shadow-none" type="checkbox" role="switch" disabled="@(!Editing)" @bind="ProfileData.DisplayRudderTrim"/>
                        </label>
                    </div>
                </div>
                <div class="col-md-auto pt-1 ml-5">
                @if (ProfileData.DisplayRudderTrim)
                {
                    <div class="form-group mb-0">
                        <label class="form-label text-black font-weight-bold">T/O Range (0-100)
                            <input type="text" class="input-text ml-2 custom-profile-textbox" value="@(ProfileData.RudderTrimTakeOffRange?.Min ?? 0)" />
                            ~<input type="text" class="input-text ml-2 custom-profile-textbox" value="@(ProfileData.RudderTrimTakeOffRange?.Max ?? 0)" />
                        </label>
                    </div>
                }
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-md-auto">
                    <div class="form-check form-switch pt-2 pl-0">
                        <label class="form-label text-black font-weight-bold">Flaps Indicator
                            <input class="form-check-input custom-profile-switch shadow-none" type="checkbox" role="switch" disabled="@(!Editing)" @bind="ProfileData.DisplayFlapsIndicator"/>
                        </label>
                    </div>
                </div>
            </div>
            @if (ProfileData.DisplayFlapsIndicator)
            {
                <div class="row mb-2">
                    <div class="col-1 pt-1 ml-5">
                        <label class="form-label text-black font-weight-bold">Markings</label>
                    </div>
                    <div class="col-md-auto pt-1 ml-5">
                        <div class="form-group mb-0">
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[0]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[1]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[2]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[3]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[4]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[5]" />
                        </div>
                    </div>
                </div>
                <div class="row mb-4">
                    <div class="col-1 pt-1 ml-5">
                        <label class="form-label text-black font-weight-bold">Positions</label>
                    </div>
                    <div class="col-md-auto pt-1 ml-5">
                        <div class="form-group mb-0">
                            <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="disabled" @bind="ProfileData.FlapsRange.Positions[0]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Positions[1]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Positions[2]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Positions[3]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Positions[4]" />&nbsp;
                            <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="disabled" @bind="ProfileData.FlapsRange.Positions[5]" />
                        </div>
                    </div>
                </div>
            }
            <div class="row mb-1">
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vs0</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vs0" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vs1</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vs1" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vfe</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vfe" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vno</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vno" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vne</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vne" />
                </div>
            </div>
            <div class="row mb-4">
                <div class="col-2" />
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vglide</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vglide" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vr</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vr" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vx</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vx" />
                </div>
                <div class="col-1 text-end pr-1">
                    <label class="form-label text-black font-weight-bold mb-0 mt-1">Vy</label>
                </div>
                <div class="col-1 px-0">
                    <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vy" />
                </div>            
            </div>
            <div class="row">
                <div class="col-md-auto">
                    <label class="form-label text-black font-weight-bold">Profile name <input type="text" class="input-text ml-2" @bind="ProfileData.Name" @bind:event="oninput"/></label>
                </div>
                <div class="col">
                    @if (Editing)
                    {
                        <button class="btn btn-sm @(_saving ? "btn-secondary text-dark" : "btn-primary") @(_saving ? ":disabled" : "") shadow-none" @onclick="async () => await Save()">Save changes</button>
                    }
                </div>
            </div>
        </div>
    }
</section>

@code {
    private bool _saving;

    [Parameter]
    public string Id { get; set; }

    public Profile ProfileData { get; set; }
    public bool Editing { get; set; }
    public char TempLetter => ProfileData.TemperaturesInFarenheit ? 'F' : 'C';

    protected Action Edit(Action onClick)
    {
        return () => { if (Editing) onClick(); };
    }

    protected Action<T> Edit<T>(Action<T> onClick)
    {
        return (T) => { if (Editing) onClick(T); };
    }

    protected async Task Save()
    {
        _saving = true;
        StateHasChanged();
        await Task.Delay(500);
        HttpResponseMessage response = await Http.PostAsJsonAsync<Profile>($"/api/update/{Id}", ProfileData);
        _saving = false;
        StateHasChanged();
    }

    protected string IsSelectedButton(bool expression)
    {
        return expression ? "btn-primary" : "btn-secondary";
    }

    protected void SelectAircraftType(AircraftType type)
    {
        if (Editing) ProfileData.AircraftType = type;
    }

    protected string GetRange(Gauge gauge, int rangeIndex)
    {
        GaugeRange range = gauge?.Ranges.ToArray()[rangeIndex];
        if (range is null) return "None,0,0";

        return $"{range.Colour},{range.Min},{range.Max}";
    }

    protected async override Task OnInitializedAsync()
    {
        ProfileData = await Http.GetFromJsonAsync<Profile>($"/api/profile/{Id}");
        if (ProfileData.FlapsRange == null) ProfileData.FlapsRange = new FlapsRange();
        
        foreach(Gauge gauge in ProfileData.Gauges)
        {
            for (int i = 0; i < 4; i++)
            {
                if (gauge.Ranges[i] == null) gauge.Ranges[i] = new GaugeRange(RangeColour.None, 0, 0);
            }
        }

        Editing = true;

        await base.OnInitializedAsync();
    }
}
