@using System.Linq.Dynamic.Core;

@inject DialogService DialogService;

<div class="container p-0 m-0 h-100" style="max-width:585px">
    <div class="row">
        <div class="col">
            <RadzenDataGrid @ref="_grid" Visible="@_showGrid"
                Data="_data" 
                TItem="Profile"           
                AllowPaging="true" PageSize="6"
                Count="_count"
                LoadData="LoadData"
                SelectionMode="Radzen.DataGridSelectionMode.Multiple" @bind-Value=@_selected>
                <Columns>
                    <RadzenDataGridColumn TItem="Profile" Width="42px" Sortable="false" Filterable="false">
                        <HeaderTemplate>
                            <div style="padding-left:2px;">
                                <RadzenCheckBox TriState="false" TValue="bool" Value="@AnySelected"
                                                Change="@(args => _selected = (args ? _data?.ToList() : null))" />
                            </div>
                        </HeaderTemplate>
                        <Template Context="profile">
                            <RadzenCheckBox TriState="false" Value="@IsSelected(profile)"
                                            TValue="bool" Change="@(args => { if(!_allowRowSelectOnRowClick) { _grid.SelectRow(profile); }})" />
                        </Template>
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Profile" Property="Name" Title="Profile Name" >
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Profile" Property="AircraftType" Title="Aircraft Type">
                    </RadzenDataGridColumn>
                    <RadzenDataGridColumn TItem="Profile" Title="Last Updated">
                        <Template Context="profile">
                            @profile.LastUpdated.ToShortDateString()
                        </Template>
                    </RadzenDataGridColumn>
                </Columns>  
            </RadzenDataGrid>
        </div>
    </div>
    <div class="row pb-3" style="position: absolute; bottom: 0; width:95%;">
        <div class="col-4 mt-2">
            <button class="btn shadow-none @(AnySelected ? "btn-primary" : "btn-secondary")" disabled="@(!AnySelected)">Export</button>
            <button class="btn shadow-none @(AnySelected ? "btn-danger" : "btn-secondary")" disabled="@(!AnySelected)">Delete</button>
        </div>
        <div class="col-4 mt-2 pl-4">
            <button class="btn shadow-none @(iPadConnected ? "btn-primary" : "btn-secondary")" disabled="@(!iPadConnected)">Send to iPad</button>
        </div>
        <div class="col-4 mt-2 pr-4 justify-content-end">
            <button class="btn btn-primary shadow-none">Import</button>
            <button class="btn btn-primary shadow-none">ProfileDB</button>
        </div>
    </div>
</div>

@code {
    private bool _showGrid = true;
    private bool _allowRowSelectOnRowClick = true;
    private bool _isLoading;
    private IEnumerable<Profile> _data;
    private IList<Profile> _selected;
    private int _count;
    private RadzenDataGrid<Profile> _grid;

    protected bool AnySelected => _selected != null && _selected.Count() > 0;
    protected bool iPadConnected => false;

    public IList<Profile> Profiles { get; set; } = new List<Profile>();

    protected override void OnInitialized()
    {
        for (int i = 0; i < 17; i++)
        {
            Profiles.Add(new Profile() { Name = $"Test Profile {i}", LastUpdated = DateTime.Now });
        }

        base.OnInitialized();
    }

    protected async Task LoadData(LoadDataArgs args)
    {
        _isLoading = true;

        await Task.Yield();

        var query = Profiles.AsQueryable();

        if (!string.IsNullOrEmpty(args.Filter))
        {
            query = query.Where(args.Filter);
        }

        if (!string.IsNullOrEmpty(args.OrderBy))
        {
            query = query.OrderBy(args.OrderBy);
        }

        _count = query.Count();
        _data = query.Skip(args.Skip.Value).Take(args.Top.Value).ToList();

        _isLoading = false;
    }

    protected bool IsSelected(Profile profile) => AnySelected && _selected.Contains(profile);
}
