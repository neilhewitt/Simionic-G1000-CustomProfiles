@page "/profile/{Id}"
@page "/edit/{Id}"
@page "/new"

@using System.IO
@using System.Text
@using Simionic.CustomProfiles.Editor
@using System.Text.Json

@inject NavigationManager Navigation
@inject AuthenticationStateProvider AuthState
@inject IJSRuntime JS

<section class="bg-white pt-5">
    <div class="text-center @(ProfileData == null ? "mb-4" : "")"><h3 class="fw-bolder">@(ProfileData?.Name ?? "Loading...")@TitleWarts()</h3></div>
    @if (ProfileData is not null)
    {
        <div class="text-center mb-4"><h5>By @ProfileData.Owner.Name</h5></div>
        <div class="container px-5 py-3 mb-5 vw-100 bg-dark bg-opacity-25 rounded-3">
            @if (ProfileData.Id != null && !Editing)
            {
                <div class="row mb-5 bg-white rounded-2 py-2 m-0">
                    <div class="col-5 text-right">
                    </div>
                    <div class="col-2 text-center">
                        @if (CanEdit && !Editing)
                        {
                            <button class="btn btn-primary border-0 shadow-none px-4" @onclick="GoToEditMode">Edit</button>
                        }
                        <span style="width:3px">&nbsp;</span>
                        @if (!Editing)
                        {
                            <button class="btn btn-primary btn-success border-0 shadow-none" @onclick="Export">Export</button>
                        }
                    </div>
                    <div class="col-5 text-right">
                    </div>
                </div>
            }
            <div class="row justify-content-center">
                @if (ProfileData.Id == null)
                {
                    <div class="alert alert-danger" role="alert">
                        <b>If you leave this page without saving your new profile as a draft, it will be lost.</b>
                    </div>
                }
                else if (!String.IsNullOrWhiteSpace(ProfileData.Notes ?? ""))
                {
                    <div class="alert alert-secondary" role="alert">
                            <b>Author note:</b> @ProfileData.Notes
                    </div>
                }
                @if (Editing && ProfileData.Id != null) 
                { 
                    <div class="alert alert-danger" role="alert">
                        <b>Changes made here do not take effect until you click 'save changes'.</b>
                    </div>
                }
            </div>
            <div class="row justify-content-center">
            @if (CanEdit && Editing && ProfileData.Id != null)
            {
                <div class="col">
                    <div class="form-group">
                        <label class="form-label text-black font-weight-bold mr-2">Status</label>
                        <div class="btn-group ml-2">
                            <button class="btn btn-large @IsSelectedButton(!ProfileData.IsPublished) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.IsPublished = false)" disabled="@(!Editing)">Draft</button>
                            <button class="btn btn-large @IsSelectedButton(ProfileData.IsPublished) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.IsPublished = true)" disabled="@(!Editing)">Published</button>
                        </div>
                    </div>
                </div>
            }
            </div>
            <ProfileEditor @bind-ProfileData="@ProfileData" @bind-CanEdit="@CanEdit" @bind-Editing="@Editing" />
            <div class="row">
                @if (Editing)
                {
                    <div class="col-md-auto">
                        <label class="form-label text-black font-weight-bold">Profile name <input type="text" class="input-text ml-2" @bind="ProfileData.Name" @bind:event="oninput"/></label>
                    </div>
                    <div class="col">
                            <button class="btn btn-sm @GetSaveButtonClasses("btn-primary", "btn-secondary") @GetSaveButtonClasses("", ":disabled") shadow-none" 
                                data-toggle="modal" data-target="#alertModal"
                                @onclick="async () => await Save()">@GetSaveButtonText()</button>
                    </div>
                }
                else
                {
                    <div class="col-md-auto">
                        <label class="form-label text-black font-weight-bold">Profile name <input type="text" class="input-text ml-2" value="@ProfileData.Name" disabled/></label>
                    </div>
                }
            </div>
        </div>
        <div class="modal" id="alertModal" tabindex="-1" role="dialog" data-backdrop="static" aria-hidden="true">
            <div class="modal-dialog modal-dialog-centered" role="document">
                <div class="modal-content">
                    <div class="modal-body @(_error ? "text-danger" : "")">
                        @((_error ? _errorMessage : _alertMessage) ?? "Please wait...")
                    </div>
                    <div class="modal-footer">
                        @if (_saveWarning)
                        {
                            <button type="button" class="btn btn-success" data-dismiss="modal" @onclick="async () => { _alert = false; _error = false; await Save(); }">Save</button>
                            <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => { _alert = false; _error = false;  _saveWarning = false; _saved = false; _saving = false; }">Cancel</button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-primary" data-dismiss="modal" @onclick="() => { _alert = false; _error = false; StateHasChanged(); }">OK</button>
                        }
                    </div>
                </div>
            </div>
        </div>
    }

    @if (_error)
    {
        <p class="text-center text-danger">@_errorMessage</p>
        <p class="text-center">Please try again later, or if this persists, contact <a href="/contact">the site admin</a>.</p>
    }

    <p class="text-center"><a href="/profiles">Back to profile list</a></p>
</section>

@code 
{
    private bool _saving;
    private bool _saved;
    private bool _error;
    private bool _alert;
    private bool _saveWarning;
    private string _alertMessage;
    private string _errorMessage;

    private bool _profileWasPublishedAtPageLoad = false;

    [Parameter] public string Id { get; set; }

    public Profile ProfileData { get; set; }
    public bool CanEdit { get; set; }
    public bool Editing { get; set; }

    protected Action Edit(Action onClick)
    {
        return () => { if (Editing) onClick(); };
    }

    protected Action<T> Edit<T>(Action<T> onClick)
    {
        return (T) => { if (Editing) onClick(T); };
    }

    protected MarkupString TitleWarts()
    {
        string warts = "";
        if (Editing)
        {
            warts += "<span class=\"text-danger ml-3\">";
            if (ProfileData.Id == null)
            {
                warts += "New Profile";
            }
            else
            {
                warts += "Editing";
            }
            warts += "</span>";
        }

        return (MarkupString)warts;
    }

    protected async Task Save()
    {
        if (Editing)
        {
            _error = false;
            _errorMessage = null;
            _alert = false;
            _alertMessage = null;

            if (ProfileData.Id == null && !_saveWarning)
            {
                _saving = false;
                _alert = true;
                _alertMessage = "This will save your new profile to the database as a draft";
                _saveWarning = true;
                StateHasChanged();
                return;
            }
            else
            {
                _saving = true;
                _saveWarning = false;
                StateHasChanged();
                await Task.Delay(500);

                try
                {
                    ProfileData = await ProfileStore.Upsert(ProfileData);

                    _profileWasPublishedAtPageLoad = ProfileData.IsPublished;

                    _saving = false;
                    _saved = true;
                    _alert = true;
                    _alertMessage = "Profile saved";
                    StateHasChanged();

                    await Task.Delay(1000);
                    _saved = false;
                    StateHasChanged();
                }
                catch (ProfileUpdateException ex)
                {
                    _errorMessage = ex.Message;
                    _saving = false;
                    _saved = false;
                    _error = true;
                    StateHasChanged();
                }
            }
        }
    }

    protected string GetSaveButtonClasses(string active, string inactive)
    {
        if (_saving || _saved) return inactive;
        return active;
    }

    protected string GetSaveButtonText()
    {
        if (_saving && _saveWarning) return "Saving changes";
        if (_saved) return "Changes saved";
        if (ProfileData.Id == null) return "Save as draft";

        return "Save changes";
    }

    protected string IsSelectedButton(bool expression)
    {
        return expression ? "btn-primary" : "btn-secondary";
    }

    protected void SelectAircraftType(AircraftType type)
    {
        if (Editing) ProfileData.AircraftType = type;
    }

    protected string GetRange(Gauge gauge, int rangeIndex)
    {
        GaugeRange range = gauge?.Ranges.ToArray()[rangeIndex];
        if (range is null) return "None,0,0";

        return $"{range.Colour},{range.Min},{range.Max}";
    }

    protected void SetTempScale(bool fahrenheit)
    {
        ProfileData.TemperaturesInFahrenheit = fahrenheit;

        string newTemp = "°" + (fahrenheit ? "F" : "C");
        string oldTemp = "°" + (fahrenheit ? "C" : "F");
        foreach(Gauge gauge in ProfileData.Gauges)
        {
            gauge.Name = gauge.Name.Replace(oldTemp, newTemp);
        }
    }

    protected void GoToEditMode()
    {
        Navigation.NavigateTo($"/edit/{Id}", true);
    }

    protected async Task Export(MouseEventArgs args)
    {
        string json = JsonSerializer.Serialize(ProfileData, new JsonSerializerOptions { WriteIndented = true });

        // need to remove owner details
        string ownerPattern = $@"""Id"": ""{ProfileData.Owner.Id}""";
        string namePattern = $@"""Name"": ""{ProfileData.Owner.Name}""";
        string idPattern = $@"""id"": ""{ProfileData.Id}""";
        json = json.Replace(ownerPattern, @"""Id"": null").Replace(namePattern, @"""Name"": null").Replace(idPattern, @"""id"": null");

        MemoryStream stream = new MemoryStream(Encoding.UTF8.GetBytes(json));

        using var streamRef = new DotNetStreamReference(stream: stream);
        await JS.InvokeVoidAsync("downloadFileFromStream", $"{ProfileData.Name}.json", streamRef);
    }

    protected async override Task OnInitializedAsync()
    {
        var state = await AuthState.GetAuthenticationStateAsync();

        if (Navigation.IsAt("new") && Id == null && User.IsLoggedIn)
        {
            string name = null;
            var query = QueryHelpers.ParseQuery(Navigation.ToAbsoluteUri(Navigation.Uri).Query);
            StringValues values = String.Empty;
            if (query.TryGetValue("name", out values)) name = values.SingleOrDefault() ?? "New Profile";

            try
            {
                ProfileData = new Profile();
                ProfileData.Name = name;
                ProfileData.Owner.Name = User.Name;
                ProfileData.Owner.Id = User.OwnerId;
            }
            catch (ProfileStoreException ex)
            {
                _error = true;
                _errorMessage = ex.Message;
            }
        }
        else
        {
            try
            {
                ProfileData = await ProfileStore.GetAsync(Id);
                _profileWasPublishedAtPageLoad = ProfileData.IsPublished;
            }
            catch (ProfileStoreException ex)
            {
                _error = true;
                _errorMessage = ex.Message;
            }
        }

        if (ProfileData != null)
        {
            if (User.IsLoggedIn && User.Owns(ProfileData))
            {
                CanEdit = true;
            }
        }

        // turn editing off (remove later)
        //CanEdit = false;

        if (CanEdit && (Navigation.IsAt("edit") || Navigation.IsAt("new")))
        {
            Editing = true;
        }

        await base.OnInitializedAsync();
    }
}
