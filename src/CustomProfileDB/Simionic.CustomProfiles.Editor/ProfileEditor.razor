@using Newtonsoft.Json
@using System.IO
@using System.Text

@inject NavigationManager Navigation

<div class="row">
    <div class="col-3">
        <label class="form-label text-black font-weight-bold pt-2">Type</label>
    </div>
    <div class="col-9">
        <div class="form-group">
            <div class="btn-group">
            @foreach(AircraftType type in Enum.GetValues<AircraftType>())
            {
                <button class="btn btn-large @IsSelectedButton(type == ProfileData.AircraftType) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.AircraftType = type)" disabled="@(!Editing)">@type</button>
            }
            </div>
            <div class="btn-group">
                <button class="btn btn-large @IsSelectedButton(ProfileData.Engines == 1) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.Engines = 1)" disabled="@(!Editing)">Single</button>
                <button class="btn btn-large @IsSelectedButton(ProfileData.Engines == 2) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.Engines = 2)" disabled="@(!Editing)">Twin</button>
            </div>
        </div>
    </div>
</div>
@if (ProfileData.AircraftType == AircraftType.Piston)
{
    <div class="row">
        <div class="col-3">
            <label class="form-label text-black font-weight-bold pt-2">Cylinders</label>
        </div>
        <div class="col-9">
            <div class="form-group">
                <div class="btn-group">
                    <button class="btn btn-large @IsSelectedButton(ProfileData.Cylinders == 4) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.Cylinders = 4)" disabled="@(!Editing)">4</button>
                    <button class="btn btn-large @IsSelectedButton(ProfileData.Cylinders == 6) mt-1 mb-1 shadow-none" @onclick="Edit(() => ProfileData.Cylinders = 6)" disabled="@(!Editing)">6</button>
                </div>
            </div>
        </div>
    </div>
    <div class="row">
        <div class="col-3 pt-1">
            <label class="form-label text-black font-weight-bold">FADEC</label>
        </div>
        <div class="col-9">
            <input class="form-check-input custom-profile-checkbox shadow-none" type="checkbox" disabled="@(!Editing)" @bind="ProfileData.FADEC"/>
        </div>
    </div>
    <div class="row">
        <div class="col-3 pt-1">
            <label class="form-label text-black font-weight-bold">Turbocharged</label>
        </div>
        <div class="col-9">
            <input class="form-check-input custom-profile-checkbox shadow-none" type="checkbox" disabled="@(!Editing)" @bind="ProfileData.Turbocharged"/>
        </div>
    </div>
    <div class="row">
        <div class="col-3 pt-1">
            <label class="form-label text-black font-weight-bold">Constant-speed</label>
        </div>
        <div class="col-9">
            <input class="form-check-input custom-profile-checkbox shadow-none" type="checkbox" disabled="@(!Editing || ProfileData.FADEC)" @bind="ProfileData.ConstantSpeed"/>
        </div>
    </div>
}
<div class="row pt-3">
    <div class="col-3 pt-3 pt-1">
            <label class="form-label text-black font-weight-bold mr-2">Temperature</label>
    </div>
    <div class="col-9 pt-2">
        <div class="form-group">
            <div class="btn-group">
                <button class="btn btn-large @IsSelectedButton(ProfileData.TemperaturesInFahrenheit) mt-1 mb-1 shadow-none" @onclick="Edit(() => SetTempScale(true))" disabled="@(!Editing)">&deg;F</button>
                <button class="btn btn-large @IsSelectedButton(!ProfileData.TemperaturesInFahrenheit) mt-1 mb-1 shadow-none" @onclick="Edit(() => SetTempScale(false))" disabled="@(!Editing)">&deg;C</button>
            </div>
        </div>
    </div>
</div>
<!-- RANGED GAUGES -->
@if (ProfileData.AircraftType != AircraftType.Piston)
{
    <!-- Interior turbine temperature -->
    <GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.ITT" @bind-Editing="@Editing" />
}
@if (ProfileData.AircraftType == AircraftType.Turboprop)
{
    <!-- Torque in ft-lbs -->
    <GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.Torque" GaugeType="Torque" @bind-Editing="@Editing" />
}
@if (ProfileData.AircraftType == AircraftType.Piston && ProfileData.ConstantSpeed)
{
    <!-- Manifold Pressure -->           
    <GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.ManifoldPressure" @bind-Editing="@Editing" />
}
@if (ProfileData.AircraftType == AircraftType.Piston && ProfileData.FADEC)
{
    <!-- Load -->           
    <GaugeDisplay @bind-ProfileGauge="@ProfileData.Load" GaugeType="Load" @bind-Editing="@Editing" />
}
@if (ProfileData.AircraftType != AircraftType.Jet)
{
    <!-- RPM -->           
    <GaugeDisplay @bind-ProfileGauge="@ProfileData.RPM" @bind-Editing="@Editing" />
}
@if (ProfileData.AircraftType == AircraftType.Piston && ProfileData.Turbocharged)
{
    <!-- TIT -->           
    <GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.TIT" @bind-Editing="@Editing" />
}
@if (ProfileData.AircraftType == AircraftType.Turboprop)
{
    <!-- Gas generator speed -->            
    <GaugeDisplay @bind-ProfileGauge="@ProfileData.NG" GaugeType="NG" @bind-Editing="@Editing" />
}
<!-- Fuel capacity -->           
<GaugeDisplay @bind-ProfileGauge="@ProfileData.Fuel" GaugeType="Fuel" @bind-Editing="@Editing" />
<!-- Fuel flow (gallons per hour) -->           
<GaugeDisplay @bind-ProfileGauge="@ProfileData.FuelFlow" @bind-Editing="@Editing" />
@if (ProfileData.AircraftType == AircraftType.Piston)
{
    <!-- Vacuum PSI -->
    <div class="row mb-5">
        <div class="col-2 pt-2 pr-5"><p class="text-black font-weight-bold">Vacuum (PSI)</p></div>
        <div class="col-md-auto pt-2 pr-1"><p class="text-black font-weight-bold">Range</p></div>
        <div class="col-md-auto pt-1">
            <div class="form-group">
                <label class="form-label text-black font-weight-bold"> 
                    @if (Editing)
                    {
                        <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="@ProfileData.VacuumPSIRange.Min" /><span>~</span><input type="text" class="input-text custom-profile-textbox" @bind="@ProfileData.VacuumPSIRange.Max" />
                    }
                    else
                    {
                        <input type="text" class="input-text ml-2 custom-profile-textbox" value="@ProfileData.VacuumPSIRange.Min" disabled /><span>~</span><input type="text" class="input-text custom-profile-textbox" value="@ProfileData.VacuumPSIRange.Max" disabled />
                    }
                </label>
            </div>
        </div>
        <div class="col-md-auto pt-2 pl-5 pr-1"><p class="text-black font-weight-bold">Green</p></div>
        <div class="col-md-auto pt-1">
            <div class="form-group">
                <label class="form-label text-black font-weight-bold"> 
                    @if (Editing)
                    {
                        <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="@ProfileData.VacuumPSIRange.GreenStart" /><span>~</span><input type="text" class="input-text ml-2 custom-profile-textbox" @bind="@ProfileData.VacuumPSIRange.GreenEnd" />
                    }
                    else
                    {
                        <input type="text" class="input-text ml-2 custom-profile-textbox" value="@ProfileData.VacuumPSIRange.GreenStart" disabled /><span>~</span><input type="text" class="input-text custom-profile-textbox" value="@ProfileData.VacuumPSIRange.GreenEnd" disabled />
                    }
                </label>
            </div>
        </div>
    </div>
}
<!-- Oil pressure -->            
<GaugeDisplay @bind-ProfileGauge="@ProfileData.OilPressure" @bind-Editing="@Editing" />
<!-- Oil temperature -->            
<GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.OilTemperature" @bind-Editing="@Editing" />
@if (ProfileData.AircraftType == AircraftType.Piston)
{
    <!-- Cylinder head temperature -->           
    <GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.CHT" @bind-Editing="@Editing" />
    <!--  Exhaust gas temperature -->            
    <GaugeDisplay HasRange="true" @bind-ProfileGauge="@ProfileData.EGT" @bind-Editing="@Editing" />
}
<div class="row mb-3">
    <div class="col-2 pt-1">
        <label class="form-label text-black font-weight-bold">Elevator Trim</label>
    </div>
    <div class="col-2">
        <input class="form-check-input custom-profile-checkbox shadow-none" type="checkbox" disabled="@(!Editing)" @bind="ProfileData.DisplayElevatorTrim"/>
    </div>
    <div class="col-md-auto pt-1 ml-5">
        <div class="form-group mb-0">
            <label class="form-label @(ProfileData.DisplayElevatorTrim ? "text-black" : "text-muted") font-weight-bold">T/O Range (0-100)
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!Editing || !ProfileData.DisplayElevatorTrim)" @bind="ProfileData.ElevatorTrimTakeOffRange.Min" />
                ~<input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!Editing || !ProfileData.DisplayElevatorTrim)" @bind="@ProfileData.ElevatorTrimTakeOffRange.Max" />
            </label>
        </div>
    </div>
</div>
<div class="row mb-3">
    <div class="col-2 pt-1">
        <label class="form-label text-black font-weight-bold">Rudder Trim</label>
    </div>
    <div class="col-2">
        <input class="form-check-input custom-profile-checkbox shadow-none" type="checkbox" disabled="@(!Editing)" @bind="ProfileData.DisplayRudderTrim"/>
    </div>
    <div class="col-md-auto pt-1 ml-5">
        <div class="form-group mb-0">
            <label class="form-label @(ProfileData.DisplayRudderTrim ? "text-black" : "text-muted") font-weight-bold">T/O Range (0-100)
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!Editing || !ProfileData.DisplayRudderTrim)" @bind="@ProfileData.RudderTrimTakeOffRange.Min" />
                ~<input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!Editing || !ProfileData.DisplayRudderTrim)" @bind="@ProfileData.RudderTrimTakeOffRange.Max" />
            </label>
        </div>
    </div>
</div>
<div class="row mb-4">
    <div class="col-2 pt-1">
        <label class="form-label text-black font-weight-bold">Flap Indicator</label>
    </div>
    <div class="col-2">
        <input class="form-check-input custom-profile-checkbox shadow-none" type="checkbox" disabled="@(!Editing)" @bind="ProfileData.DisplayFlapsIndicator"/>
    </div>
</div>
<div class="row">
    <div class="col-2" />
    <div class="col-2 pt-1">
        <label class="form-label @(ProfileData.DisplayFlapsIndicator ? "text-black" : "text-muted") font-weight-bold">Markings</label>
    </div>
    <div class="col-8 pt-1">
        <div class="form-group mb-0">
            @if (Editing && ProfileData.DisplayFlapsIndicator)
            {
                <input type="text" class="input-text custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[0]" />
                <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[1]" />
                <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[2]" />
                <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[3]" />
                <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[4]" />
                <input type="text" class="input-text ml-2 custom-profile-textbox" @bind="ProfileData.FlapsRange.Markings[5]" />
            }
            else
            {
                <input type="text" class="input-text custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Markings[0]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Markings[1]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Markings[2]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Markings[3]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Markings[4]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Markings[5]" readonly />
            }
        </div>
    </div>
</div>
<div class="row mb-4">
    <div class="col-2" />
    <div class="col-2 pt-1">
        <label class="form-label @(ProfileData.DisplayFlapsIndicator ? "text-black" : "text-muted") font-weight-bold">Positions</label>
    </div>
    <div class="col-8 pt-1">
        <div class="form-group mb-0">
            @if (Editing && ProfileData.DisplayFlapsIndicator)
            {
                    <input type="text" class="input-text custom-profile-textbox" placeholder="%" @bind="ProfileData.FlapsRange.Positions[0]" />
                    <input type="text" class="input-text ml-2 custom-profile-textbox" placeholder="%" @bind="ProfileData.FlapsRange.Positions[1]" />
                    <input type="text" class="input-text ml-2 custom-profile-textbox" placeholder="%" @bind="ProfileData.FlapsRange.Positions[2]" />
                    <input type="text" class="input-text ml-2 custom-profile-textbox" placeholder="%" @bind="ProfileData.FlapsRange.Positions[3]" />
                    <input type="text" class="input-text ml-2 custom-profile-textbox" placeholder="%" @bind="ProfileData.FlapsRange.Positions[4]" />
                    <input type="text" class="input-text ml-2 custom-profile-textbox" placeholder="%" disabled="disabled" @bind="ProfileData.FlapsRange.Positions[5]" />
            }
            else
            {
                <input type="text" class="input-text custom-profile-textbox" disabled="disabled" value="@ProfileData.FlapsRange.Positions[0]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Positions[1]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Positions[2]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Positions[3]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="@(!ProfileData.DisplayFlapsIndicator || !Editing)" value="@ProfileData.FlapsRange.Positions[4]" readonly />
                <input type="text" class="input-text ml-2 custom-profile-textbox" disabled="disabled" value="@ProfileData.FlapsRange.Positions[5]" readonly />
            }
        </div>
    </div>
</div>
<div class="row mb-1">
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vs0</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vs0" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vs1</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vs1" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vfe</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vfe" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vno</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vno" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vne</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vne" disabled="@(!Editing)" />
    </div>
</div>
<div class="row mb-4">
    <div class="col-2" />
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vg</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vglide" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vr</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vr" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vx</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vx" disabled="@(!Editing)" />
    </div>
    <div class="col-1 text-end pr-1">
        <label class="form-label text-black font-weight-bold mb-0 mt-1">Vy</label>
    </div>
    <div class="col-1 px-0">
        <input type="text" class="input-text ml-1 custom-profile-textbox" @bind="ProfileData.VSpeeds.Vy" disabled="@(!Editing)" />
    </div>            
</div>
@if (Editing)
{
    <div class="row mt-5 mb-3">
        <div class="col-12">
            <label class="form-label text-black font-weight-bold">Notes</label><br />
            <textarea class="form-control input-text shadow-none w-auto p-3" style="resize:none; min-width:100%" rows="5" maxlength="2000" placeholder="Any notes about this profile you want users to see" @bind="ProfileData.Notes" @bind:event="oninput" />
        </div>
    </div>
}
        
@code {
    private bool _error;
    private bool _alert;
    private string _alertMessage;
    private string _errorMessage;

    private bool _profileWasPublishedAtPageLoad = false;

    [Parameter] public Profile ProfileData { get; set; }
    [Parameter] public EventCallback<Profile> ProfileDataChanged { get; set; }
    
    [Parameter] public bool CanEdit { get; set; }
    [Parameter] public EventCallback<bool> CanEditChanged { get; set; }
    
    [Parameter] public bool Editing { get; set; }
    [Parameter] public EventCallback<bool> EditingChanged { get; set; }

    protected Action Edit(Action onClick)
    {
        return () => { if (Editing) onClick(); };
    }

    protected Action<T> Edit<T>(Action<T> onClick)
    {
        return (T) => { if (Editing) onClick(T); };
    }

    protected string IsSelectedButton(bool expression)
    {
        return expression ? "btn-primary" : "btn-secondary";
    }

    protected void SelectAircraftType(AircraftType type)
    {
        if (Editing) ProfileData.AircraftType = type;
    }

    protected string GetRange(Gauge gauge, int rangeIndex)
    {
        GaugeRange range = gauge?.Ranges.ToArray()[rangeIndex];
        if (range is null) return "None,0,0";

        return $"{range.Colour},{range.Min},{range.Max}";
    }

    protected void SetTempScale(bool fahrenheit)
    {
        ProfileData.TemperaturesInFahrenheit = fahrenheit;

        string newTemp = "°" + (fahrenheit ? "F" : "C");
        string oldTemp = "°" + (fahrenheit ? "C" : "F");
        foreach(Gauge gauge in ProfileData.Gauges)
        {
            gauge.Name = gauge.Name.Replace(oldTemp, newTemp);
        }
    }

    protected async override Task OnInitializedAsync()
    {
        //var state = await AuthState.GetAuthenticationStateAsync();

        //if (Navigation.IsAt("new") && Id == null && User.IsLoggedIn)
        //{
        //    string name = null;
        //    var query = QueryHelpers.ParseQuery(Navigation.ToAbsoluteUri(Navigation.Uri).Query);
        //    StringValues values = String.Empty;
        //    if (query.TryGetValue("name", out values)) name = values.SingleOrDefault() ?? "New Profile";

        //    try
        //    {
        //        ProfileData = new Profile();
        //        ProfileData.Name = name;
        //        ProfileData.Owner.Name = User.Name;
        //        ProfileData.Owner.Id = User.OwnerId;
        //    }
        //    catch (ProfileStoreException ex)
        //    {
        //        _error = true;
        //        _errorMessage = ex.Message;
        //    }
        //}
        //else
        //{
        //    try
        //    {
        //        ProfileData = await ProfileStore.GetAsync(Id);
        //        _profileWasPublishedAtPageLoad = ProfileData.IsPublished;
        //    }
        //    catch (ProfileStoreException ex)
        //    {
        //        _error = true;
        //        _errorMessage = ex.Message;
        //    }
        //}

        //if (ProfileData != null)
        //{
        //    if (User.IsLoggedIn && User.Owns(ProfileData))
        //    {
        //        CanEdit = true;
        //    }
        //}

        //if (CanEdit && (Navigation.IsAt("edit") || Navigation.IsAt("new")))
        //{
        //    Editing = true;
        //}

        await base.OnInitializedAsync();
    }
}
